from telebot import TeleBot
from telebot.types import Message, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from .functions import validate_ip_address
import psutil
import paramiko

allowed_users = []
connections = {}


def connect_handlers(bot: TeleBot, config: dict):
    '''
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤.
    '''
    welcome_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    welcome_kb.add(
        KeyboardButton('‚öô –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'),
        KeyboardButton('üîë SSH'),
    )
    
    commands_kb = ReplyKeyboardMarkup(row_width=1)
    commands_kb.add(
        KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(config["webapp_url"])),
        KeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
    )

    ssh_kb = ReplyKeyboardMarkup(row_width=1)
    ssh_kb.add(
        KeyboardButton("–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"),
        KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
    )

    conns_kb = InlineKeyboardMarkup()
    conns_kb.add(
        InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="delete_conn")
    )
    
    @bot.message_handler(commands=["start"])
    def welcome(msg: Message):
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=welcome_kb)
    
    @bot.message_handler(func=lambda msg: msg.text == "‚öô –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    def auth(msg: Message):
        if msg.chat.id in config['admins']:
            bot.send_message(msg.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=commands_kb)
            allowed_users.append(msg.chat.id)
        else:
            bot.send_message(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    @bot.message_handler(func=lambda msg: msg.text == "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤" and msg.chat.id in allowed_users)
    def resource_monitor(msg: Message):
        cpu = psutil.cpu_percent(interval=1)
        mem, total_mem = psutil.virtual_memory().percent, psutil.virtual_memory().total
        parts = psutil.disk_partitions()
        disks = {}
        for part in parts:
            disks[part.device] = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {round(psutil.disk_usage(part.mountpoint).used / 1024 / 1024 / 1024, 2)} GB ({psutil.disk_usage(part.mountpoint).percent}%)"
        disks = "; ".join([f"{disk}. {disk_info}\n" for disk, disk_info in disks.items()])
        result = f'''
üéõ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - {cpu}%.
üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {mem}%; –í—Å–µ–≥–æ: {round(total_mem / 1024 / 1024 / 1024, 2)} GB.
üíΩ –î–∏—Å–∫–∏ - {disks}
        '''
        bot.send_message(msg.chat.id, result)
    
    @bot.message_handler(func=lambda msg: msg.text == "üîë SSH")
    def ssh_get_info(msg: Message):
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=ssh_kb)

    @bot.message_handler(content_types=["text"], func=lambda msg: msg.text == "–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    def list_connections(msg: Message):
        conn = connections.get(msg.chat.id)
        if not conn:
            bot.send_message(msg.chat.id, "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        else:
            ip = conn.get_transport().getpeername()
            bot.send_message(msg.chat.id, ip, reply_markup=conns_kb)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_conn")
    def disconnect(call: CallbackQuery):
        conn = connections.get(call.message.chat.id)
        if not conn:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        else:
            conn.close()
            del connections[call.message.chat.id]
            bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å.")
    
    @bot.message_handler(content_types=["text"], func=lambda msg: msg.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
    def connect_ssh(msg: Message):
        bot.send_message(msg.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        bot.register_next_step_handler(msg, get_ip_address)
        
    def get_ip_address(msg: Message):
        address = msg.text
        if not validate_ip_address(address):
            bot.send_message(msg.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(msg, get_ip_address)
        else:
            bot.send_message(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")
            bot.register_next_step_handler(msg, get_username, address)

    def get_username(msg: Message, address: str):
        bot.send_message(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å! –¢–æ–ª—å–∫–æ –Ω–∞ —É—à–∫–æ!!")
        bot.register_next_step_handler(msg, get_password, address, msg.text)
        
    def get_password(msg: Message, address: str, username: str):
        bot.send_message(msg.chat.id, "–•–æ—Ä–æ—à–æ! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
        password = msg.text
        bot.delete_message(msg.chat.id, msg.id)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(
            hostname=address, username=username, password=password,
            look_for_keys=False, allow_agent=False, timeout=10
        )

        connections[msg.chat.id] = client

        bot.send_message(msg.chat.id, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ /ssh <–∫–æ–º–∞–Ω–¥–∞>, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.")

    @bot.message_handler(commands=["ssh"])
    def proceed_ssh(msg: Message):
        if msg.chat.id not in connections.keys():
            bot.send_message(msg.chat.id, "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
            return
        command = msg.text[4:]
        if command in config['dangerous']:
            bot.send_message(msg.chat.id, "–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            return
        client = connections[msg.chat.id]
        stdin, stdout, stderr = client.exec_command(command)
        data = stdout.read() + stderr.read()
        bot.send_message(msg.chat.id, data)